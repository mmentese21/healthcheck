# HealthCheckApplication

HealthCheckApplication is a machine learning-based tool designed to detect diseases based on symptoms. It leverages a trained disease classification model to predict potential diseases and provides tools for training, inference, and result analysis.

## Project Structure

```
.gitignore
detect_disease.py       # Script for detecting diseases based on symptoms
detect.py               # Script for running predictions
predictions.txt         # File containing prediction results
README                  # Project documentation
requirements.txt        # Python dependencies
sample_chats.json       # Sample input data for testing
Symptom2Disease.csv     # Dataset mapping symptoms to diseases
train_diseases.py       # Script for training the disease classification model
disease_classifier/     # Directory containing the trained model and tokenizer files
results/                # Directory containing training checkpoints and results
```

### Key Directories and Files

- **`disease_classifier/`**: Contains the trained model (`model.safetensors`), tokenizer configuration, and vocabulary files.
- **`results/`**: Stores training checkpoints and metadata, such as optimizer state and training arguments.

## Installation

1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd HealthCheckApplication
   ```

2. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

## Usage

### Detect Diseases
Run the `detect_disease.py` script to predict diseases based on symptoms:
```bash
python detect_disease.py
```

### Train the Model
To train the disease classification model, use the `train_diseases.py` script:
```bash
python train_diseases.py
```

### Analyze Predictions
Predictions are saved in `predictions.txt`. You can analyze the results using your preferred tools.

## Data

- **`Symptom2Disease.csv`**: A CSV file mapping symptoms to diseases, used for training and inference.
- **`sample_chats.json`**: Example input data for testing the model.

## Model

The trained model is stored in the `disease_classifier/` directory. It includes:
- `model.safetensors`: The trained model weights.
- `tokenizer.json` and related files: Tokenizer configuration for preprocessing input data.

## Results

Training checkpoints and metadata are saved in the `results/` directory. These include:
- `checkpoint-387/`: A specific checkpoint containing the model and optimizer state.
- `training_args.bin`: Training arguments used for reproducibility.

## Contributing

Contributions are welcome! Please fork the repository and submit a pull request.

## License

This project is licensed under the MIT License. See the LICENSE file for details.